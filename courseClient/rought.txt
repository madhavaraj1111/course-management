import React, { useState, useEffect, createContext, useContext } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate, useParams } from 'react-router-dom';

// API Base URL
const API_BASE_URL = 'http://localhost:5000/api';

// Auth Context
const AuthContext = createContext();

const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Auth Provider
const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(localStorage.getItem('token'));

  useEffect(() => {
    if (token) {
      // Decode token to get user info (simplified)
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        setUser({
          id: payload.userId,
          username: payload.username,
          role: payload.role
        });
      } catch (error) {
        localStorage.removeItem('token');
        setToken(null);
      }
    }
    setLoading(false);
  }, [token]);

  const login = async (email, password) => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('token', data.token);
        setToken(data.token);
        setUser(data.user);
        return { success: true };
      } else {
        const error = await response.json();
        return { success: false, message: error.message };
      }
    } catch (error) {
      return { success: false, message: 'Network error' };
    }
  };

  const signup = async (username, email, password, role = 'student') => {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/signup`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password, role }),
      });

      if (response.ok) {
        return { success: true };
      } else {
        const error = await response.json();
        return { success: false, message: error.message };
      }
    } catch (error) {
      return { success: false, message: 'Network error' };
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
  };

  const value = {
    user,
    token,
    login,
    signup,
    logout,
    loading,
    isAuthenticated: !!user,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// API Helper
const apiRequest = async (endpoint, options = {}) => {
  const token = localStorage.getItem('token');
  const config = {
    headers: {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
    },
    ...options,
  };

  const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
  
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || 'Something went wrong');
  }
  
  return response.json();
};

// Protected Route Component
const ProtectedRoute = ({ children, requiredRole }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }

  if (!user) {
    return <Navigate to="/login" replace />;
  }

  if (requiredRole && user.role !== requiredRole) {
    return <Navigate to="/" replace />;
  }

  return children;
};

// Login Component
const Login = () => {
  const [form, setForm] = useState({ email: '', password: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await login(form.email, form.password);
    
    if (result.success) {
      navigate('/');
    } else {
      setError(result.message);
    }
    
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Login</h2>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              required
              value={form.email}
              onChange={(e) => setForm({ ...form, email: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              required
              value={form.password}
              onChange={(e) => setForm({ ...form, password: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
        
        <p className="mt-4 text-center text-sm text-gray-600">
          Don't have an account?{' '}
          <button
            onClick={() => navigate('/signup')}
            className="text-blue-600 hover:underline"
          >
            Sign up
          </button>
        </p>
      </div>
    </div>
  );
};

// Signup Component
const Signup = () => {
  const [form, setForm] = useState({ username: '', email: '', password: '', role: 'student' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { signup } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await signup(form.username, form.email, form.password, form.role);
    
    if (result.success) {
      navigate('/login');
    } else {
      setError(result.message);
    }
    
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="max-w-md w-full bg-white rounded-lg shadow-md p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Sign Up</h2>
        
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Username</label>
            <input
              type="text"
              required
              value={form.username}
              onChange={(e) => setForm({ ...form, username: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              required
              value={form.email}
              onChange={(e) => setForm({ ...form, email: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              required
              value={form.password}
              onChange={(e) => setForm({ ...form, password: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Role</label>
            <select
              value={form.role}
              onChange={(e) => setForm({ ...form, role: e.target.value })}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="student">Student</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:opacity-50"
          >
            {loading ? 'Creating Account...' : 'Sign Up'}
          </button>
        </form>
        
        <p className="mt-4 text-center text-sm text-gray-600">
          Already have an account?{' '}
          <button
            onClick={() => navigate('/login')}
            className="text-blue-600 hover:underline"
          >
            Login
          </button>
        </p>
      </div>
    </div>
  );
};

// Header Component
const Header = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center space-x-8">
            <h1 className="text-xl font-bold text-gray-900">Course Management</h1>
            
            <nav className="flex space-x-6">
              <button
                onClick={() => navigate('/')}
                className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
              >
                Dashboard
              </button>
              
              {user?.role === 'admin' && (
                <button
                  onClick={() => navigate('/courses/create')}
                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                >
                  Create Course
                </button>
              )}
              
              {user?.role === 'student' && (
                <button
                  onClick={() => navigate('/browse')}
                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                >
                  Browse Courses
                </button>
              )}
            </nav>
          </div>
          
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-600">
              {user?.username} ({user?.role})
            </span>
            <button
              onClick={logout}
              className="bg-red-600 text-white px-4 py-2 rounded-md text-sm hover:bg-red-700"
            >
              Logout
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

// Admin Dashboard
const AdminDashboard = () => {
  const [stats, setStats] = useState(null);
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [statsData, coursesData] = await Promise.all([
          apiRequest('/admin/dashboard'),
          apiRequest('/admin/courses')
        ]);
        setStats(statsData);
        setCourses(coursesData);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleDelete = async (courseId) => {
    if (window.confirm('Are you sure you want to delete this course?')) {
      try {
        await apiRequest(`/admin/courses/${courseId}`, { method: 'DELETE' });
        setCourses(courses.filter(course => course._id !== courseId));
      } catch (error) {
        alert('Error deleting course: ' + error.message);
      }
    }
  };

  if (loading) return <div className="p-6">Loading...</div>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
      
      {/* Stats */}
      {stats && (
        <div className="grid grid-cols-4 gap-4 mb-8">
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Total Courses</h3>
            <p className="text-2xl font-bold text-blue-600">{stats.totalCourses}</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Total Students</h3>
            <p className="text-2xl font-bold text-green-600">{stats.totalStudents}</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Active Enrollments</h3>
            <p className="text-2xl font-bold text-purple-600">{stats.activeEnrollments}</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Avg Completion</h3>
            <p className="text-2xl font-bold text-orange-600">{stats.avgCompletion}%</p>
          </div>
        </div>
      )}

      {/* My Courses */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">My Courses</h2>
          <button
            onClick={() => navigate('/courses/create')}
            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
          >
            Create New Course
          </button>
        </div>
        
        <div className="space-y-4">
          {courses.map(course => (
            <div key={course._id} className="flex justify-between items-center p-4 border rounded-lg">
              <div>
                <h3 className="font-semibold">{course.title}</h3>
                <p className="text-sm text-gray-600">{course.category} • {course.difficulty}</p>
                <p className="text-sm text-blue-600">{course.enrolledStudents.length} enrolled students</p>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => navigate(`/courses/${course._id}/edit`)}
                  className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
                >
                  Edit
                </button>
                <button
                  onClick={() => navigate(`/courses/${course._id}`)}
                  className="bg-gray-600 text-white px-3 py-1 rounded text-sm hover:bg-gray-700"
                >
                  View
                </button>
                <button
                  onClick={() => handleDelete(course._id)}
                  className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
          
          {courses.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              No courses created yet. Create your first course to get started!
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Student Dashboard
const StudentDashboard = () => {
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await apiRequest('/student/dashboard');
        setDashboardData(data);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) return <div className="p-6">Loading...</div>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">My Learning Dashboard</h1>
      
      {/* Stats */}
      <div className="grid grid-cols-3 gap-4 mb-8">
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-sm font-medium text-gray-500">Enrolled Courses</h3>
          <p className="text-2xl font-bold text-blue-600">{dashboardData?.totalEnrolled || 0}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-sm font-medium text-gray-500">Completed Courses</h3>
          <p className="text-2xl font-bold text-green-600">{dashboardData?.completedCourses || 0}</p>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-sm font-medium text-gray-500">Avg Progress</h3>
          <p className="text-2xl font-bold text-purple-600">{dashboardData?.avgProgress || 0}%</p>
        </div>
      </div>

      {/* Enrolled Courses */}
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Continue Learning</h2>
        
        <div className="space-y-4">
          {dashboardData?.enrolledCourses.map(course => (
            <div key={course.id} className="p-4 border rounded-lg">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="font-semibold">{course.title}</h3>
                  <p className="text-sm text-gray-600">by {course.instructor}</p>
                </div>
                <button
                  onClick={() => navigate(`/courses/${course.id}`)}
                  className="bg-blue-600 text-white px-4 py-2 rounded text-sm hover:bg-blue-700"
                >
                  Continue
                </button>
              </div>
              
              <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full" 
                  style={{ width: `${course.progress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600">{course.progress}% complete</p>
            </div>
          ))}
          
          {(!dashboardData?.enrolledCourses || dashboardData.enrolledCourses.length === 0) && (
            <div className="text-center py-8 text-gray-500">
              No enrolled courses yet.{' '}
              <button
                onClick={() => navigate('/browse')}
                className="text-blue-600 hover:underline"
              >
                Browse courses to get started!
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Browse More Courses */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Discover New Courses</h2>
          <button
            onClick={() => navigate('/browse')}
            className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Browse All Courses
          </button>
        </div>
        
        <p className="text-gray-600">
          Explore our course catalog to find new learning opportunities and expand your skills.
        </p>
      </div>
    </div>
  );
};

// Course Browse (Student)
const CourseBrowse = () => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    search: '',
    category: '',
    difficulty: '',
    instructor: ''
  });
  const navigate = useNavigate();

  useEffect(() => {
    fetchCourses();
  }, [filters]);

  const fetchCourses = async () => {
    try {
      const query = new URLSearchParams(filters).toString();
      const data = await apiRequest(`/courses?${query}`);
      setCourses(data);
    } catch (error) {
      console.error('Error fetching courses:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEnroll = async (courseId) => {
    try {
      await apiRequest(`/courses/${courseId}/enroll`, { method: 'POST' });
      // Refresh courses to update enrollment status
      fetchCourses();
      alert('Enrolled successfully!');
    } catch (error) {
      alert('Error enrolling: ' + error.message);
    }
  };

  if (loading) return <div className="p-6">Loading...</div>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">Browse Courses</h1>
      
      {/* Filters */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="grid grid-cols-4 gap-4">
          <input
            type="text"
            placeholder="Search courses..."
            value={filters.search}
            onChange={(e) => setFilters({...filters, search: e.target.value})}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
          <select
            value={filters.category}
            onChange={(e) => setFilters({...filters, category: e.target.value})}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">All Categories</option>
            <option value="Programming">Programming</option>
            <option value="Design">Design</option>
            <option value="Business">Business</option>
          </select>
          <select
            value={filters.difficulty}
            onChange={(e) => setFilters({...filters, difficulty: e.target.value})}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">All Levels</option>
            <option value="Beginner">Beginner</option>
            <option value="Intermediate">Intermediate</option>
            <option value="Advanced">Advanced</option>
          </select>
          <select
            value={filters.instructor}
            onChange={(e) => setFilters({...filters, instructor: e.target.value})}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">All Instructors</option>
            {/* You can populate this dynamically */}
          </select>
        </div>
      </div>

      {/* Courses Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {courses.map(course => (
          <div key={course._id} className="bg-white rounded-lg shadow p-6">
            <div className="mb-4">
              <div className="w-full h-32 bg-gray-200 rounded mb-3"></div>
              <h3 className="text-lg font-semibold">{course.title}</h3>
              <p className="text-sm text-gray-600">by {course.instructorName}</p>
            </div>
            
            <div className="flex justify-between items-center mb-4">
              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">
                {course.category}
              </span>
              <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                {course.difficulty}
              </span>
            </div>
            
            <div className="flex space-x-2">
              <button
                onClick={() => navigate(`/courses/${course._id}`)}
                className="flex-1 bg-gray-600 text-white px-3 py-2 rounded text-sm hover:bg-gray-700"
              >
                View Details
              </button>
              {course.isEnrolled ? (
                <button
                  onClick={() => navigate(`/courses/${course._id}`)}
                  className="flex-1 bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700"
                >
                  Continue Learning
                </button>
              ) : (
                <button
                  onClick={() => handleEnroll(course._id)}
                  className="flex-1 bg-blue-600 text-white px-3 py-2 rounded text-sm hover:bg-blue-700"
                >
                  Enroll Now
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {courses.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No courses found matching your criteria.
        </div>
      )}
    </div>
  );
};

// Course Detail
const CourseDetail = () => {
  const { id } = useParams();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [expandedSection, setExpandedSection] = useState(null);
  const { user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    fetchCourse();
  }, [id]);

  const fetchCourse = async () => {
    try {
      const data = await apiRequest(`/courses/${id}`);
      setCourse(data);
    } catch (error) {
      console.error('Error fetching course:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEnroll = async () => {
    try {
      await apiRequest(`/courses/${id}/enroll`, { method: 'POST' });
      fetchCourse(); // Refresh course data
      alert('Enrolled successfully!');
    } catch (error) {
      alert('Error enrolling: ' + error.message);
    }
  };

  const handleLessonComplete = async (sectionId, lessonId) => {
    try {
      await apiRequest(`/courses/${id}/lessons/${sectionId}/${lessonId}/complete`, { method: 'POST' });
      fetchCourse(); // Refresh course data
    } catch (error) {
      alert('Error marking lesson complete: ' + error.message);
    }
  };

  if (loading) return <div className="p-6">Loading...</div>;
  if (!course) return <div className="p-6">Course not found</div>;

  const totalLessons = course.sections?.reduce((acc, section) => acc + section.lessons.length, 0) || 0;
  const completedLessons = course.progress?.length || 0;
  const progressPercent = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;

  return (
    <div className="p-6">
      {/* Course Header */}
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <h1 className="text-3xl font-bold mb-2">{course.title}</h1>
            <p className="text-gray-600 mb-4">by {course.instructorName}</p>
            
            <div className="flex space-x-4 mb-4">
              <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded">
                {course.category}
              </span>
              <span className="bg-green-100 text-green-800 px-3 py-1 rounded">
                {course.difficulty}
              </span>
            </div>
            
            <p className="text-gray-700 mb-4">{course.description}</p>
            
            {course.isEnrolled && (
              <div className="mb-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-semibold">Progress</span>
                  <span className="text-sm text-gray-600">{completedLessons}/{totalLessons} lessons</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-blue-600 h-3 rounded-full" 
                    style={{ width: `${progressPercent}%` }}
                  ></div>
                </div>
                <p className="text-sm text-gray-600 mt-1">{progressPercent}% complete</p>
              </div>
            )}
          </div>
          
          <div className="flex flex-col space-y-3">
            <div className="w-full h-48 bg-gray-200 rounded"></div>
            {!course.isEnrolled ? (
              <>
                {user?.role === 'student' && (
                  <button
                    onClick={handleEnroll}
                    className="bg-blue-600 text-white px-6 py-3 rounded font-semibold hover:bg-blue-700"
                  >
                    Enroll in Course
                  </button>
                )}
              </>
            ) : (
              <button className="bg-green-600 text-white px-6 py-3 rounded font-semibold">
                Enrolled ✓
              </button>
            )}
            
            {user?.role === 'admin' && course.instructor === user.id && (
              <button
                onClick={() => navigate(`/courses/${course._id}/edit`)}
                className="bg-orange-600 text-white px-6 py-3 rounded font-semibold hover:bg-orange-700"
              >
                Edit Course
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Course Content */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Course Content</h2>
        
        <div className="space-y-4">
          {course.sections?.map(section => (
            <div key={section._id} className="border rounded">
              <button
                onClick={() => setExpandedSection(expandedSection === section._id ? null : section._id)}
                className="w-full p-4 text-left flex justify-between items-center hover:bg-gray-50"
              >
                <span className="font-semibold">{section.title}</span>
                <span className="text-gray-500">
                  {expandedSection === section._id ? '−' : '+'}
                </span>
              </button>
              
              {expandedSection === section._id && (
                <div className="border-t">
                  {section.lessons?.map(lesson => {
                    const isCompleted = course.progress?.some(
                      p => p.sectionId === section._id && p.lessonId === lesson._id
                    );
                    
                    return (
                      <div key={lesson._id} className="p-4 border-b last:border-b-0 flex justify-between items-center">
                        <div className="flex items-center space-x-3">
                          {course.isEnrolled && (
                            <input
                              type="checkbox"
                              checked={isCompleted}
                              onChange={() => handleLessonComplete(section._id, lesson._id)}
                              className="rounded"
                            />
                          )}
                          <span className={isCompleted ? 'line-through text-gray-500' : ''}>
                            {lesson.title}
                          </span>
                        </div>
                        
                        {course.isEnrolled && (
                          <button className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700">
                            {isCompleted ? 'Review' : 'Start'}
                          </button>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          ))}
          
          {(!course.sections || course.sections.length === 0) && (
            <div className="text-center py-8 text-gray-500">
              No course content available yet.
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Course Create/Edit Form
const CourseForm = ({ isEdit = false }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    title: '',
    description: '',
    category: 'Programming',
    difficulty: 'Beginner',
    thumbnail: '',
    sections: []
  });

  useEffect(() => {
    if (isEdit && id) {
      fetchCourse();
    }
  }, [isEdit, id]);

  const fetchCourse = async () => {
    try {
      const data = await apiRequest(`/courses/${id}`);
      setForm({
        title: data.title,
        description: data.description,
        category: data.category,
        difficulty: data.difficulty,
        thumbnail: data.thumbnail || '',
        sections: data.sections || []
      });
    } catch (error) {
      console.error('Error fetching course:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isEdit) {
        await apiRequest(`/admin/courses/${id}`, {
          method: 'PUT',
          body: JSON.stringify(form)
        });
        alert('Course updated successfully!');
      } else {
        await apiRequest('/admin/courses', {
          method: 'POST',
          body: JSON.stringify(form)
        });
        alert('Course created successfully!');
      }
      navigate('/');
    } catch (error) {
      alert('Error saving course: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const addSection = () => {
    setForm({
      ...form,
      sections: [...form.sections, {
        title: '',
        description: '',
        lessons: []
      }]
    });
  };

  const updateSection = (index, field, value) => {
    const newSections = [...form.sections];
    newSections[index] = { ...newSections[index], [field]: value };
    setForm({ ...form, sections: newSections });
  };

  const addLesson = (sectionIndex) => {
    const newSections = [...form.sections];
    newSections[sectionIndex].lessons.push({
      title: '',
      description: '',
      content: ''
    });
    setForm({ ...form, sections: newSections });
  };

  const updateLesson = (sectionIndex, lessonIndex, field, value) => {
    const newSections = [...form.sections];
    newSections[sectionIndex].lessons[lessonIndex] = {
      ...newSections[sectionIndex].lessons[lessonIndex],
      [field]: value
    };
    setForm({ ...form, sections: newSections });
  };

  const removeSection = (index) => {
    const newSections = form.sections.filter((_, i) => i !== index);
    setForm({ ...form, sections: newSections });
  };

  const removeLesson = (sectionIndex, lessonIndex) => {
    const newSections = [...form.sections];
    newSections[sectionIndex].lessons = newSections[sectionIndex].lessons.filter((_, i) => i !== lessonIndex);
    setForm({ ...form, sections: newSections });
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">{isEdit ? 'Edit Course' : 'Create New Course'}</h1>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Info */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Basic Information</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Title</label>
              <input
                type="text"
                required
                value={form.title}
                onChange={(e) => setForm({ ...form, title: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Thumbnail URL</label>
              <input
                type="url"
                value={form.thumbnail}
                onChange={(e) => setForm({ ...form, thumbnail: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
              <select
                value={form.category}
                onChange={(e) => setForm({ ...form, category: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="Programming">Programming</option>
                <option value="Design">Design</option>
                <option value="Business">Business</option>
                <option value="Marketing">Marketing</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Difficulty</label>
              <select
                value={form.difficulty}
                onChange={(e) => setForm({ ...form, difficulty: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="Beginner">Beginner</option>
                <option value="Intermediate">Intermediate</option>
                <option value="Advanced">Advanced</option>
              </select>
            </div>
          </div>
          
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea
              required
              rows={4}
              value={form.description}
              onChange={(e) => setForm({ ...form, description: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        {/* Sections */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Course Sections</h2>
            <button
              type="button"
              onClick={addSection}
              className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
            >
              Add Section
            </button>
          </div>
          
          <div className="space-y-4">
            {form.sections.map((section, sectionIndex) => (
              <div key={sectionIndex} className="border rounded p-4">
                <div className="flex justify-between items-center mb-3">
                  <h3 className="font-semibold">Section {sectionIndex + 1}</h3>
                  <button
                    type="button"
                    onClick={() => removeSection(sectionIndex)}
                    className="text-red-600 hover:text-red-800"
                  >
                    Remove Section
                  </button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Section Title</label>
                    <input
                      type="text"
                      required
                      value={section.title}
                      onChange={(e) => updateSection(sectionIndex, 'title', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">Section Description</label>
                  <textarea
                    rows={2}
                    value={section.description}
                    onChange={(e) => updateSection(sectionIndex, 'description', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                {/* Lessons */}
                <div className="border-t pt-4">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="font-medium">Lessons</h4>
                    <button
                      type="button"
                      onClick={() => addLesson(sectionIndex)}
                      className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                    >
                      Add Lesson
                    </button>
                  </div>
                  
                  <div className="space-y-3">
                    {section.lessons.map((lesson, lessonIndex) => (
                      <div key={lessonIndex} className="border rounded p-3 bg-gray-50">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-sm font-medium">Lesson {lessonIndex + 1}</span>
                          <button
                            type="button"
                            onClick={() => removeLesson(sectionIndex, lessonIndex)}
                            className="text-red-600 hover:text-red-800 text-sm"
                          >
                            Remove
                          </button>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">Lesson Title</label>
                            <input
                              type="text"
                              required
                              value={lesson.title}
                              onChange={(e) => updateLesson(sectionIndex, lessonIndex, 'title', e.target.value)}
                              className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                          </div>
                        </div>
                        
                        <div className="mb-3">
                          <label className="block text-xs font-medium text-gray-700 mb-1">Lesson Description</label>
                          <textarea
                            rows={2}
                            value={lesson.description}
                            onChange={(e) => updateLesson(sectionIndex, lessonIndex, 'description', e.target.value)}
                            className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-xs font-medium text-gray-700 mb-1">Lesson Content</label>
                          <textarea
                            rows={3}
                            value={lesson.content}
                            onChange={(e) => updateLesson(sectionIndex, lessonIndex, 'content', e.target.value)}
                            className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Submit */}
        <div className="flex space-x-4">
          <button
            type="submit"
            disabled={loading}
            className="bg-blue-600 text-white px-6 py-3 rounded font-semibold hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Saving...' : (isEdit ? 'Update Course' : 'Create Course')}
          </button>
          
          <button
            type="button"
            onClick={() => navigate('/')}
            className="bg-gray-600 text-white px-6 py-3 rounded font-semibold hover:bg-gray-700"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

// Main Layout
const MainLayout = () => {
  return (
    <div className="min-h-screen bg-gray-100">
      <Header />
      <main>
        <Routes>
          <Route path="/" element={
            <ProtectedRoute>
              <DashboardRouter />
            </ProtectedRoute>
          } />
          
          <Route path="/browse" element={
            <ProtectedRoute requiredRole="student">
              <CourseBrowse />
            </ProtectedRoute>
          } />
          
          <Route path="/courses/:id" element={
            <ProtectedRoute>
              <CourseDetail />
            </ProtectedRoute>
          } />
          
          <Route path="/courses/create" element={
            <ProtectedRoute requiredRole="admin">
              <CourseForm />
            </ProtectedRoute>
          } />
          
          <Route path="/courses/:id/edit" element={
            <ProtectedRoute requiredRole="admin">
              <CourseForm isEdit={true} />
            </ProtectedRoute>
          } />
        </Routes>
      </main>
    </div>
  );
};

// Dashboard Router - routes to correct dashboard based on role
const DashboardRouter = () => {
  const { user } = useAuth();
  
  if (user?.role === 'admin') {
    return <AdminDashboard />;
  } else {
    return <StudentDashboard />;
  }
};

// Main App Component
const App = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/signup" element={<Signup />} />
          <Route path="/*" element={<MainLayout />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
};

export default App;